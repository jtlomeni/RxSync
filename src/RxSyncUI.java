
import com.itextpdf.text.Document;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import org.joda.time.DateTime;
import org.joda.time.*;
import java.util.Vector;
import javax.swing.*;
import java.io.*;
import java.util.Scanner;
import java.util.Properties;
import java.util.HashMap;
import java.awt.Desktop;
import java.awt.print.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RxSyncUI.java
 *
 * Created on Sep 6, 2010, 5:20:20 PM
 */

/**
 *
 * @author jtlomeni
 */

public class RxSyncUI extends javax.swing.JFrame {
    public MedicationList medList = new MedicationList();
    public Vector medVector = new Vector();
    public Patient newPatient = new Patient();
    private static Font headerFont = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
    private static Font headerFontSmall = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static Font infoFont = new Font(Font.FontFamily.TIMES_ROMAN, 16);
    private static Font smallFont = new Font(Font.FontFamily.TIMES_ROMAN, 10);

    /** Creates new form RxSyncUI */
    public RxSyncUI() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jAddMedicationDialog = new javax.swing.JDialog();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jMedicationNameField = new javax.swing.JTextField();
        jCopayAmountField = new javax.swing.JTextField();
        jConfirmAddMedicationButton = new javax.swing.JButton();
        jCancelAddMedicationButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jFillDateMonthField = new javax.swing.JTextField();
        jFillDateDayField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jFillDateYearField = new javax.swing.JTextField();
        jSigComboBox = new javax.swing.JComboBox();
        medicationPlanDialog = new javax.swing.JDialog();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicationPlanTable = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        targetDateField = new javax.swing.JTextField();
        printPlan = new javax.swing.JButton();
        closePlan = new javax.swing.JButton();
        BuildForm = new javax.swing.JButton();
        longFillPlanDialog = new javax.swing.JDialog();
        jLabel20 = new javax.swing.JLabel();
        longFillTargetDateField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        longFillPlanTable = new javax.swing.JTable();
        printLongTable = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        BuildForm2 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jSettingsDialog = new javax.swing.JDialog();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        storeStreetTextField = new javax.swing.JTextField();
        storeCityTextField = new javax.swing.JTextField();
        storeStateTextField = new javax.swing.JTextField();
        storeZipTextField = new javax.swing.JTextField();
        storeNameTextField = new javax.swing.JTextField();
        storePhoneTextField = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        storeFaxTextField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        syncToRefill = new javax.swing.JRadioButton();
        syncToCopay = new javax.swing.JRadioButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jFirstNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLastNameField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jDoctorFirstField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jDoctorLastField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jDocFaxNumField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jEmailAddressField = new javax.swing.JTextField();
        useFaxCheckBox = new javax.swing.JCheckBox();
        useEmailCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicationListBox = new javax.swing.JList();
        jAddMedicationButton = new javax.swing.JButton();
        jDeleteMedicationButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jAllowsLongCheckBox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jStreetField = new javax.swing.JTextField();
        jCityField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jStateField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jZipField = new javax.swing.JTextField();
        dobMonthField = new javax.swing.JTextField();
        dobDayField = new javax.swing.JTextField();
        dobYearField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        syncButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jClearButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jFileNamesList = new javax.swing.JList();
        buildFormButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        refillList = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();
        settingsButton = new javax.swing.JButton();
        Test = new javax.swing.JButton();

        jAddMedicationDialog.setTitle("Add Medication");

        jLabel12.setText("Medicaton Name");

        jLabel13.setText("Copay Amount");

        jLabel14.setText("Next Fill Date");

        jConfirmAddMedicationButton.setText("Add");
        jConfirmAddMedicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConfirmAddMedicationButtonActionPerformed(evt);
            }
        });

        jCancelAddMedicationButton.setText("Cancel");
        jCancelAddMedicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelAddMedicationButtonActionPerformed(evt);
            }
        });

        jLabel16.setText("Sig");

        jLabel17.setText("Month           Day        Year");

        org.jdesktop.layout.GroupLayout jAddMedicationDialogLayout = new org.jdesktop.layout.GroupLayout(jAddMedicationDialog.getContentPane());
        jAddMedicationDialog.getContentPane().setLayout(jAddMedicationDialogLayout);
        jAddMedicationDialogLayout.setHorizontalGroup(
            jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jAddMedicationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jAddMedicationDialogLayout.createSequentialGroup()
                        .add(jLabel14)
                        .addContainerGap(376, Short.MAX_VALUE))
                    .add(jAddMedicationDialogLayout.createSequentialGroup()
                        .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel12)
                            .add(jLabel13)
                            .add(jLabel16))
                        .add(49, 49, 49)
                        .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jMedicationNameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .add(jCopayAmountField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .add(jAddMedicationDialogLayout.createSequentialGroup()
                                .add(jConfirmAddMedicationButton)
                                .add(3, 3, 3)
                                .add(jCancelAddMedicationButton))
                            .add(jAddMedicationDialogLayout.createSequentialGroup()
                                .add(jFillDateMonthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(41, 41, 41)
                                .add(jFillDateDayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jFillDateYearField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jSigComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 207, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jAddMedicationDialogLayout.createSequentialGroup()
                .add(165, 165, 165)
                .add(jLabel17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .add(29, 29, 29))
        );
        jAddMedicationDialogLayout.setVerticalGroup(
            jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jAddMedicationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(jMedicationNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(jCopayAmountField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(21, 21, 21)
                .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(jSigComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(jFillDateMonthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jFillDateDayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jFillDateYearField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel17)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(jAddMedicationDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jConfirmAddMedicationButton)
                    .add(jCancelAddMedicationButton))
                .addContainerGap())
        );

        jLabel18.setText("Medication Plan");

        medicationPlanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Medication", "Next Refill Date", "Number of Days to Fill"
            }
        ));
        jScrollPane2.setViewportView(medicationPlanTable);

        jLabel19.setText("Target Date: ");

        printPlan.setText("Print");
        printPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printPlanActionPerformed(evt);
            }
        });

        closePlan.setText("Close");
        closePlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closePlanActionPerformed(evt);
            }
        });

        BuildForm.setText("Build Refill Form");
        BuildForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildFormActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout medicationPlanDialogLayout = new org.jdesktop.layout.GroupLayout(medicationPlanDialog.getContentPane());
        medicationPlanDialog.getContentPane().setLayout(medicationPlanDialogLayout);
        medicationPlanDialogLayout.setHorizontalGroup(
            medicationPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(medicationPlanDialogLayout.createSequentialGroup()
                .add(medicationPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(medicationPlanDialogLayout.createSequentialGroup()
                        .add(179, 179, 179)
                        .add(jLabel18))
                    .add(medicationPlanDialogLayout.createSequentialGroup()
                        .add(122, 122, 122)
                        .add(jLabel19)
                        .add(18, 18, 18)
                        .add(targetDateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(medicationPlanDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE))
                    .add(medicationPlanDialogLayout.createSequentialGroup()
                        .add(71, 71, 71)
                        .add(printPlan)
                        .add(51, 51, 51)
                        .add(BuildForm)
                        .add(57, 57, 57)
                        .add(closePlan)))
                .addContainerGap())
        );
        medicationPlanDialogLayout.setVerticalGroup(
            medicationPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(medicationPlanDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel18)
                .add(15, 15, 15)
                .add(medicationPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(targetDateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(medicationPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BuildForm)
                    .add(closePlan)
                    .add(printPlan))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel20.setText("Target Date");

        longFillPlanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Medication Name", "Next Refill Date", "Short Fill (days)", "Next Fill Date", "Fill For (days)"
            }
        ));
        jScrollPane3.setViewportView(longFillPlanTable);

        printLongTable.setText("Print");
        printLongTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printLongTableActionPerformed(evt);
            }
        });

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        BuildForm2.setText("Build Refill Form");
        BuildForm2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildForm2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout longFillPlanDialogLayout = new org.jdesktop.layout.GroupLayout(longFillPlanDialog.getContentPane());
        longFillPlanDialog.getContentPane().setLayout(longFillPlanDialogLayout);
        longFillPlanDialogLayout.setHorizontalGroup(
            longFillPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(longFillPlanDialogLayout.createSequentialGroup()
                .add(longFillPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(longFillPlanDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(longFillPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(longFillPlanDialogLayout.createSequentialGroup()
                                .add(156, 156, 156)
                                .add(jLabel20)
                                .add(18, 18, 18)
                                .add(longFillTargetDateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)))
                    .add(longFillPlanDialogLayout.createSequentialGroup()
                        .add(114, 114, 114)
                        .add(printLongTable)
                        .add(51, 51, 51)
                        .add(BuildForm2)
                        .add(44, 44, 44)
                        .add(jButton1)))
                .addContainerGap())
        );
        longFillPlanDialogLayout.setVerticalGroup(
            longFillPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(longFillPlanDialogLayout.createSequentialGroup()
                .add(53, 53, 53)
                .add(longFillPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(longFillTargetDateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel20))
                .add(18, 18, 18)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .add(26, 26, 26)
                .add(longFillPlanDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(printLongTable)
                    .add(BuildForm2)
                    .add(jButton1))
                .add(19, 19, 19))
        );

        jSettingsDialog.setTitle("Settings");

        jLabel21.setText("Settings");

        jLabel22.setText("Store Name");

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Store Address"));

        jLabel23.setText("Street");

        jLabel24.setText("City");

        jLabel25.setText("State");

        jLabel26.setText("Zip");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel23)
                    .add(jLabel24)
                    .add(jLabel25)
                    .add(jLabel26))
                .add(32, 32, 32)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(storeZipTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .add(storeCityTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, storeStreetTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, storeStateTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                .add(83, 83, 83))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel23)
                    .add(storeStreetTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(storeCityTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel24))
                .add(8, 8, 8)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(storeStateTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel25))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(storeZipTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel26))
                .addContainerGap())
        );

        jLabel27.setText("Store Phone Number");

        jLabel28.setText("Store Fax Number");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Cancel");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Sync Method"));

        buttonGroup1.add(syncToRefill);
        syncToRefill.setText("Sync to Next Refill");

        buttonGroup1.add(syncToCopay);
        syncToCopay.setText("Sync to Highest Copay");

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(syncToRefill)
                    .add(syncToCopay))
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(syncToRefill)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(syncToCopay)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jSettingsDialogLayout = new org.jdesktop.layout.GroupLayout(jSettingsDialog.getContentPane());
        jSettingsDialog.getContentPane().setLayout(jSettingsDialogLayout);
        jSettingsDialogLayout.setHorizontalGroup(
            jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSettingsDialogLayout.createSequentialGroup()
                .add(jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSettingsDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel22)
                        .add(18, 18, 18)
                        .add(storeNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 158, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jSettingsDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jSettingsDialogLayout.createSequentialGroup()
                        .add(188, 188, 188)
                        .add(jLabel21))
                    .add(jSettingsDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel27)
                            .add(jLabel28))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(storeFaxTextField)
                            .add(storePhoneTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))))
                .addContainerGap(39, Short.MAX_VALUE))
            .add(jSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(59, 59, 59))
            .add(jSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(submitButton)
                .add(64, 64, 64)
                .add(jButton3)
                .addContainerGap(167, Short.MAX_VALUE))
        );
        jSettingsDialogLayout.setVerticalGroup(
            jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel21)
                .add(14, 14, 14)
                .add(jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel22)
                    .add(storeNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel27)
                    .add(storePhoneTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel28)
                    .add(storeFaxTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jSettingsDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(submitButton)
                    .add(jButton3))
                .add(49, 49, 49))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RxSync");

        jTabbedPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jTabbedPane3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane3StateChanged(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient"));

        jLabel1.setText("First Name");

        jFirstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFirstNameFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Last Name");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Doctor Information"));

        jLabel3.setText("First Name");

        jLabel4.setText("Last Name");

        jDoctorLastField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDoctorLastFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Fax Number ");

        jLabel6.setText("Email Address");

        useFaxCheckBox.setText("Use Fax");

        useEmailCheckBox.setText("Use Email");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                                .add(jLabel5)
                                .add(18, 18, 18)
                                .add(jDocFaxNumField))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                                .add(jLabel3)
                                .add(30, 30, 30)
                                .add(jDoctorFirstField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel6)
                            .add(jLabel4))
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jDoctorLastField)
                            .add(jEmailAddressField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(useFaxCheckBox)
                        .add(31, 31, 31)
                        .add(useEmailCheckBox)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jDoctorFirstField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4)
                    .add(jDoctorLastField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jDocFaxNumField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(jEmailAddressField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(useFaxCheckBox)
                    .add(useEmailCheckBox)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Medications"));

        jScrollPane1.setViewportView(medicationListBox);

        jAddMedicationButton.setText("Add Medication");
        jAddMedicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddMedicationButtonActionPerformed(evt);
            }
        });

        jDeleteMedicationButton.setText("Delete Medication");
        jDeleteMedicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteMedicationButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(59, 59, 59)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 306, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(36, 36, 36)
                        .add(jAddMedicationButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jDeleteMedicationButton)))
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jAddMedicationButton)
                    .add(jDeleteMedicationButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Insurance"));

        jAllowsLongCheckBox.setText("Allows Long Fills");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(34, 34, 34)
                .add(jAllowsLongCheckBox)
                .addContainerGap(418, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jAllowsLongCheckBox)
        );

        jLabel7.setText("Date of Birth");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Address"));

        jLabel8.setText("Street Address");

        jLabel9.setText("City");

        jLabel10.setText("State");

        jLabel11.setText("Zip");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel8)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jStreetField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .add(34, 34, 34))
                    .add(jStateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(jLabel11))
                .add(18, 18, 18)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jCityField)
                    .add(jZipField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .add(91, 91, 91))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jStreetField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9)
                    .add(jCityField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(jStateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11)
                    .add(jZipField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        dobMonthField.setColumns(2);

        dobDayField.setColumns(2);

        dobYearField.setColumns(4);
        dobYearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobYearFieldActionPerformed(evt);
            }
        });

        jLabel15.setText("mm-dd-yyyy");

        syncButton.setText("Sync");
        syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jClearButton.setText("Clear");
        jClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dobMonthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dobDayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dobYearField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel1)
                                .add(18, 18, 18)
                                .add(jFirstNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLastNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 57, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(syncButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 159, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jClearButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jFirstNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jLastNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(dobMonthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dobDayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dobYearField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(6, 6, 6)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(syncButton)
                    .add(jClearButton)
                    .add(closeButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Sync", jPanel1);

        jFileNamesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jFileNamesListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jFileNamesList);

        buildFormButton.setText("Build Form");
        buildFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildFormButtonActionPerformed(evt);
            }
        });

        refillList.setSelectionModel(new DefaultListSelectionModel()
            {
                public void setSelectionInterval(int index0,int index1){
                    if(isSelectedIndex(index0))
                    super.removeSelectionInterval(index0,index1);
                    else
                    super.addSelectionInterval(index0,index1);
                }
            });
            jScrollPane6.setViewportView(refillList);

            org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
            jPanel6.setLayout(jPanel6Layout);
            jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel6Layout.createSequentialGroup()
                    .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel6Layout.createSequentialGroup()
                            .add(34, 34, 34)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(73, 73, 73)
                            .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 223, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel6Layout.createSequentialGroup()
                            .add(241, 241, 241)
                            .add(buildFormButton)))
                    .addContainerGap(90, Short.MAX_VALUE))
            );
            jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel6Layout.createSequentialGroup()
                    .add(73, 73, 73)
                    .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 303, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(80, 80, 80)
                    .add(buildFormButton)
                    .addContainerGap(117, Short.MAX_VALUE))
            );

            jTabbedPane3.addTab("Refill Form", jPanel6);

            jToolBar1.setRollover(true);

            settingsButton.setText("Settings");
            settingsButton.setFocusable(false);
            settingsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            settingsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            settingsButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    settingsButtonActionPerformed(evt);
                }
            });
            jToolBar1.add(settingsButton);

            Test.setText("Test Fill");
            Test.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    TestActionPerformed(evt);
                }
            });

            org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 480, Short.MAX_VALUE)
                    .add(Test)
                    .add(17, 17, 17))
                .add(layout.createSequentialGroup()
                    .add(jTabbedPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 683, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(39, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(Test)
                        .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                    .add(jTabbedPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents



   /**
    * Confirm add medication Button from <jAddMedicationDialog> adds medication to
    * Medication List and lists medication name in the medication list box
    * @param evt
    */
    private void jConfirmAddMedicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConfirmAddMedicationButtonActionPerformed
        //construct medication and add to list
        

        //need to take care of case where end of year

        try{
            String name = jMedicationNameField.getText();
            int copayAmt = Integer.parseInt(jCopayAmountField.getText());
            int month = Integer.parseInt(jFillDateMonthField.getText());
            String sig = jSigComboBox.getSelectedItem().toString();
            int day = Integer.parseInt(jFillDateDayField.getText());
            int year = Integer.parseInt(jFillDateYearField.getText());

            LocalDate fillDate = new LocalDate(year, month, day);
            ///Add Medication to Patient's medication list
            Medication newMed = new Medication(name,sig,fillDate,copayAmt);
            medList.insertMed(newMed);
            clearAddMedicationDialog();

        //add medication to Jlist
            medVector.add(name);
            medicationListBox.setListData(medVector);

        }catch(IllegalFieldValueException ifv){
            JOptionPane.showMessageDialog(jAddMedicationDialog, "Please Enter an Acceptable Refill Date");
        }catch(NumberFormatException inf){
            JOptionPane.showMessageDialog(jAddMedicationDialog, "Please Enter Acceptable Values");
        }

   
        

        

    }//GEN-LAST:event_jConfirmAddMedicationButtonActionPerformed
    /**
     * Sync button clicked.  Builds an instance of <Patient> and executes
     * one of the sync algorithms.  Displays the sync plan
     * @param evt
     */
    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        storeInfo sInfo = null;

        String pfirst = jFirstNameField.getText();
        String plast = jLastNameField.getText();


        //constructs an isntance of LocalDate for patient date of birth
        try{
                LocalDate bday = new LocalDate(Integer.parseInt(dobYearField.getText()),
                    Integer.parseInt(dobMonthField.getText()),
                    Integer.parseInt(dobDayField.getText()));
                
                String street = jStreetField.getText();
                String city = jCityField.getText();
               
                String state = jStateField.getText();
                String zip = jZipField.getText();

                boolean allowsLong = jAllowsLongCheckBox.isSelected();
               

                String dfirst = jDoctorFirstField.getText();
                String dlast = jDoctorLastField.getText();
                String dFaxNum = jDocFaxNumField.getText();
                
                String demail = jEmailAddressField.getText();

                boolean useFax = useFaxCheckBox.isSelected();
                boolean useEmail = useEmailCheckBox.isSelected();
                
                newPatient = new Patient(pfirst,plast,bday,street,city,state,zip,
                allowsLong,dfirst,dlast,dFaxNum,demail,
                useFax,useEmail,medList);
                
                LocalDate target = new LocalDate();

                try{
                    File f = new File("StoreInfo.ser");
                    FileInputStream fileIn = new FileInputStream("StoreInfo.ser");
                    ObjectInputStream in = new ObjectInputStream(fileIn);
                    sInfo = (storeInfo) in.readObject();
                    in.close();
                    fileIn.close();
                    if(sInfo.sync.equals("refill")){
                        target = newPatient.syncRefill();
                        fillTable(newPatient,target);
                    }else if(sInfo.sync.equals("copay")){
                        if(jAllowsLongCheckBox.isSelected()){
                            target = newPatient.syncCopay();
                            fillTable(newPatient,target);
                        }else{
                            target = newPatient.syncCopayShort();
                            fillTableBig(newPatient,target);
                        }
                    }

                

                saveData(newPatient);

            }catch(IOException ioe){
            }catch(ClassNotFoundException cnf){

            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Please Enter an Acceptable Date of Birth");
        }
        
    }//GEN-LAST:event_syncButtonActionPerformed

    private void dobYearFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobYearFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_dobYearFieldActionPerformed

    /**
     * Delete Medication button.  Removes medication from the patients medication List.  Removes
     * Medication name from the medication list box
     * @param evt
     */
    private void jDeleteMedicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteMedicationButtonActionPerformed
   
        if(medicationListBox.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Please select Item to delete");
        }else{
            String medDelete = medicationListBox.getSelectedValue().toString();
            medList.deleteMed(medDelete);
            medVector.remove(medDelete);
            medicationListBox.setListData(medVector);

        }
}//GEN-LAST:event_jDeleteMedicationButtonActionPerformed
    /**
     * Add Medication Button, Opens <jAddMedicationDialog>.
     * @param evt
     */
    private void jAddMedicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddMedicationButtonActionPerformed
        DateTime dt = new DateTime();
        int year = dt.getYear();
        jFillDateYearField.setText(Integer.toString(year));
        jAddMedicationDialog.setVisible(true);
        fillbox();

        jAddMedicationDialog.pack();
        jMedicationNameField.requestFocus();
    }//GEN-LAST:event_jAddMedicationButtonActionPerformed

    private void jDoctorLastFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDoctorLastFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jDoctorLastFieldActionPerformed


    private void jFirstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFirstNameFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jFirstNameFieldActionPerformed

    /**
     * When tab is clicked, calls <showPatientsForForms()>
     * @param evt
     */
    private void jTabbedPane3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane3StateChanged
        showPatientsForForms();
        

    }//GEN-LAST:event_jTabbedPane3StateChanged

    /**
     * Build button clicked, Builds a PDF for patients refills
     * @param evt
     */
    private void buildFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildFormButtonActionPerformed
        storeInfo sInfo = null;
        if(jFileNamesList.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this,"Please select a Patient to create form");
        }else if (refillList.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Plese select medications that need to be refilled");
        }else{
            String patientName = jFileNamesList.getSelectedValue().toString();
            try{
                Scanner patientIn = new Scanner(new FileReader("patient_files/"+patientName));
                String name = patientIn.nextLine();
                String dob = patientIn.nextLine();
                String address = patientIn.nextLine();
                String doc = patientIn.nextLine();
                String fax = patientIn.nextLine();
                HashMap medSigMap = new HashMap();
                while(patientIn.hasNextLine()){
                    medSigMap.put(patientIn.nextLine(), patientIn.nextLine());
                }
                
                Object [] refills  = refillList.getSelectedValues();
                for(int i = 0; i < refills.length; i++){
                    System.out.println(refills[i].toString());
                }
               
                //=========================
                //************************
                //BUILD PDF DOCUMENT HERE
                //==========================

                try{
                    File f = new File("StoreInfo.ser");
                    FileInputStream fileIn = new FileInputStream("StoreInfo.ser");
                    ObjectInputStream in = new ObjectInputStream(fileIn);
                    sInfo = (storeInfo) in.readObject();
                    in.close();
                    fileIn.close();
                    Document document = new Document(PageSize.A4);
                    try{
                        PdfWriter.getInstance(document, new FileOutputStream(name + ".pdf"));
                        document.open();

                        addStoreHeader(document, sInfo);
                        addDocInfo(document,doc,fax);
                        addPatientInfo(document,name,dob,address);
                        //addMedications(document, refills,medSigMap);
                        addAuthorization(document);
                        addFooter(document, sInfo.fax);

                        document.close();

                        Desktop dt = Desktop.getDesktop();
                        try{
                            dt.open(new File (name + ".pdf"));
                        }catch(IOException ioe){
                            System.out.println("FIle not found");
                        }
                     
                    }catch(DocumentException de){
                        System.err.println(de.getMessage());
                    }catch(IOException ioe){
                        System.err.println(ioe.getMessage());
                    }
                }catch(IOException ioe){

                }catch(ClassNotFoundException cnf){
                }

            }catch(FileNotFoundException fnf){
                JOptionPane.showMessageDialog(this, "ERROR: Patient file not found, please Sync again");
            }
        }
    }//GEN-LAST:event_buildFormButtonActionPerformed

    /**
     * Opens <jSettingsDialog> for store settings
     * @param evt
     */
    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed

        storeInfo sInfo = null;

        try
        {
            File f = new File("StoreInfo.ser");
            if(!f.exists()){
                f.createNewFile();
                FileOutputStream storeInfoOut = new FileOutputStream(f);
                ObjectOutputStream out = new ObjectOutputStream(storeInfoOut);
                out.writeObject(sInfo);
                out.close();
            }else{
                
                FileInputStream fileIn = new FileInputStream("StoreInfo.ser");
                ObjectInputStream in = new ObjectInputStream(fileIn);
                sInfo = (storeInfo) in.readObject();
                in.close();
                fileIn.close();
                storeNameTextField.setText(sInfo.name);
                storeStreetTextField.setText(sInfo.address);
                storeCityTextField.setText(sInfo.city);
                storeStateTextField.setText(sInfo.state);
                storeZipTextField.setText(sInfo.zip);
                storePhoneTextField.setText(sInfo.zip);
                storeFaxTextField.setText(sInfo.fax);
                if(sInfo.sync.equals("copay")){
                    syncToCopay.setSelected(true);
                    syncToRefill.setSelected(false);
                }else if(sInfo.sync.equals("refill")){
                     syncToRefill.setSelected(true);
                    syncToCopay.setSelected(false);
                }
                
         }
            
        }catch(IOException IOe){
            IOe.printStackTrace();
            
            return;
        }catch(ClassNotFoundException c){
            System.out.println("Store Info Class not Fond");
            c.printStackTrace();
            return;
        }
        jSettingsDialog.setVisible(true);
        jSettingsDialog.pack();
    }//GEN-LAST:event_settingsButtonActionPerformed

    /**
     * Submits settings and saves <storeInfo> as Serializable object
     * @param evt
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String name = storeNameTextField.getText();
        String address = storeStreetTextField.getText();
        String city = storeCityTextField.getText();
        String state = storeStateTextField.getText();
        String zip = storeZipTextField.getText();
        String phone = storePhoneTextField.getText();
        String fax = storeFaxTextField.getText();
        String sync;

        if(syncToRefill.isSelected()){
            sync = "refill";
        }else{
            sync = "copay";
        }
        storeInfo sInfo = new storeInfo(name,address,city,state,zip,phone,fax,sync);
        try{
            FileOutputStream storeInfoOut = new FileOutputStream("StoreInfo.ser");
            ObjectOutputStream out = new ObjectOutputStream(storeInfoOut);
            out.writeObject(sInfo);
            out.close();
        }catch (IOException io){
            io.printStackTrace();
        }
        jSettingsDialog.setVisible(false);
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * Changes the medications to choose from to create a refill form, depending on
     * what patient is clicked
     * @param evt
     */
    private void jFileNamesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jFileNamesListValueChanged
        // TODO add your handling code here:
        System.out.println("BLAHH");
        if(!jFileNamesList.isSelectionEmpty()){
        String patientName = jFileNamesList.getSelectedValue().toString();
            try{
                Scanner patientIn = new Scanner(new FileReader("patient_files/"+patientName));
                String name = patientIn.nextLine();
                String dob = patientIn.nextLine();
                String address = patientIn.nextLine();
                String doc = patientIn.nextLine();
                String fax = patientIn.nextLine();
                Vector refillVector = new Vector();
                while(patientIn.hasNextLine()){
                    String med = (patientIn.nextLine());
                    refillVector.add(med);
                    //System.out.print(med + " ");
                    String sig = patientIn.nextLine(); //skip sig
                    //System.out.println(sig + " j");
                }
                refillList.setListData(refillVector);
            }catch(FileNotFoundException fnf){
                JOptionPane.showMessageDialog(this, "ERROR: Patient file not found, please Sync again");
            }

        }

    }//GEN-LAST:event_jFileNamesListValueChanged

    /**
     * Clears all text boxes in add Medication dialog and exits dialog
     * @param evt
     */
    private void jCancelAddMedicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelAddMedicationButtonActionPerformed

        clearAddMedicationDialog();
    }//GEN-LAST:event_jCancelAddMedicationButtonActionPerformed

    /**
     * Exits program
     * @param evt
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        clearPatientFiles();
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * Clears all text boxes
     * @param evt
     */
    private void jClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearButtonActionPerformed
        jFirstNameField.setText("");
        jLastNameField.setText("");
        dobMonthField.setText("");
        dobDayField.setText("");
        dobYearField.setText("");
        jDoctorFirstField.setText("");
        jDoctorLastField.setText("");
        jDocFaxNumField.setText("");
        jEmailAddressField.setText("");
        Vector clear = new Vector();
        medicationListBox.setListData(clear);
        jAllowsLongCheckBox.setSelected(false);
        jStreetField.setText("");
        jCityField.setText("");
        jStateField.setText("");
        jZipField.setText("");
        newPatient = new Patient();
        medList = new MedicationList();
        medVector = new Vector();
        clearPatientFiles();


    }//GEN-LAST:event_jClearButtonActionPerformed

    /**
     * Creates refill form PDF and sends to printer
     * @param evt
     */
    private void printPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printPlanActionPerformed

        printTable(newPatient);
        
    }//GEN-LAST:event_printPlanActionPerformed
    /**
     * Exits medication Plan dialog
     * @param evt
     */
    private void closePlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closePlanActionPerformed
        medicationPlanDialog.setVisible(false);
    }//GEN-LAST:event_closePlanActionPerformed

        /**
         * prints medication plan for patient whose insurance does not allow long fills
         *
         * @param evt
         */
    private void printLongTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printLongTableActionPerformed

        printLongTable(newPatient);
    }//GEN-LAST:event_printLongTableActionPerformed

    /**
     * Test case
     * @param evt
     */
    private void TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestActionPerformed
        jFirstNameField.setText("Joe");
        jLastNameField.setText("DiMaggio");
        jDoctorFirstField.setText("Sanje");
        jDoctorLastField.setText("Gupta");
        jDocFaxNumField.setText("2284243132");
        jEmailAddressField.setText("sgupta@doc.com");
        jStreetField.setText("3 Yankee Way");
        jStateField.setText("New York");
        jCityField.setText("New York");
        jZipField.setText("12404");
        dobMonthField.setText("11");
        dobDayField.setText("25");
        dobYearField.setText("1914");

        medList.insertMed(new Medication("Lipitor","QE",new LocalDate(2010,12,10),10));
        medList.insertMed(new Medication("Prozac", "QDE", new LocalDate(2010,12,16),100));
        medList.insertMed(new Medication("Xanax", "QE", new LocalDate(2010,12,28),10));
        medList.insertMed(new Medication("Actos","QDE", new LocalDate(2011,1,2),10));
        medList.insertMed(new Medication("Viagra", "QI", new LocalDate(2010,12,7),10));
        Medication current = medList.firstMed;
        
        while(current!=null){
            medVector.add(current.medName);
            current=current.nextMed;
        }
        medicationListBox.setListData(medVector);

    }//GEN-LAST:event_TestActionPerformed

    private void BuildFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildFormActionPerformed
                    storeInfo sInfo = null;
                        try{
                    File f = new File("StoreInfo.ser");
                    FileInputStream fileIn = new FileInputStream("StoreInfo.ser");
                    ObjectInputStream in = new ObjectInputStream(fileIn);
                    sInfo = (storeInfo) in.readObject();
                    in.close();
                    fileIn.close();
                    Document document = new Document(PageSize.A4);
                    try{
                        String name = newPatient.firstName +"-"+newPatient.lastName;
                        PdfWriter.getInstance(document, new FileOutputStream("patient_files/"+name + ".pdf"));
                        document.open();

                        addStoreHeader(document, sInfo);
                        addDocInfo(document,newPatient.doctorName,Long.toString(newPatient.doctorFaxNum));
                        addPatientInfo(document,newPatient.firstName + " " + newPatient.lastName,newPatient.birthday.toString(),
                                                newPatient.streetAddress + ", " + newPatient.cityAddress + ", " + newPatient.stateAddress + ", " + newPatient.zipAddress );
                        addMedications(document, newPatient.medList);
                        addAuthorization(document);
                        addFooter(document, sInfo.fax);

                        document.close();

                        Desktop dt = Desktop.getDesktop();
                        try{
                            dt.open(new File ("patient_files/"+name + ".pdf"));
                        }catch(IOException ioe){
                            System.out.println("FIle not found");
                        }

                    }catch(DocumentException de){
                        System.err.println(de.getMessage());
                    }catch(IOException ioe){
                        System.err.println(ioe.getMessage());
                    }
                }catch(IOException ioe){

                }catch(ClassNotFoundException cnf){
                    System.out.println("File not found");
                }

    }//GEN-LAST:event_BuildFormActionPerformed

    private void BuildForm2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildForm2ActionPerformed
        
         storeInfo sInfo = null;
                        try{
                    File f = new File("StoreInfo.ser");
                    FileInputStream fileIn = new FileInputStream("StoreInfo.ser");
                    ObjectInputStream in = new ObjectInputStream(fileIn);
                    sInfo = (storeInfo) in.readObject();
                    in.close();
                    fileIn.close();
                    Document document = new Document(PageSize.A4);
                    try{
                        String name = newPatient.firstName +"-"+newPatient.lastName;
                        PdfWriter.getInstance(document, new FileOutputStream("patient_files/"+name + ".pdf"));
                        document.open();

                        addStoreHeader(document, sInfo);
                        addDocInfo(document,newPatient.doctorName,Long.toString(newPatient.doctorFaxNum));
                        addPatientInfo(document,newPatient.firstName + " " + newPatient.lastName,newPatient.birthday.toString(),
                                                newPatient.streetAddress + ", " + newPatient.cityAddress + ", " + newPatient.stateAddress + ", " + newPatient.zipAddress );
                        addMedications(document, newPatient.medList);
                        addAuthorization(document);
                        addFooter(document, sInfo.fax);

                        document.close();

                        Desktop dt = Desktop.getDesktop();
                        try{
                            dt.open(new File ("patient_files/"+name + ".pdf"));
                        }catch(IOException ioe){
                            System.out.println("FIle not found");
                        }

                    }catch(DocumentException de){
                        System.err.println(de.getMessage());
                    }catch(IOException ioe){
                        System.err.println(ioe.getMessage());
                    }
                }catch(IOException ioe){

                }catch(ClassNotFoundException cnf){
                    System.out.println("File not found");
                }
    }//GEN-LAST:event_BuildForm2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        longFillPlanDialog.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

   
 
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setupEnterActionForAllButtons();
                new RxSyncUI().setVisible(true);


            }
        });
    }

 /**
  * fill the table for patients medication plan
  * @param newPatient
  * @param target
  */
    public void fillTable(Patient newPatient, LocalDate target){
        int row = 0;
        Medication current = newPatient.medList.firstMed;
        while(current != null){
            medicationPlanTable.setValueAt(current.medName, row, 0);
            medicationPlanTable.setValueAt(current.fillDate.toString(),row,1);
            medicationPlanTable.setValueAt(current.planFillLength,row, 2);
            row++;
            current = current.nextMed;

        }
        targetDateField.setText(target.toString());
        medicationPlanDialog.setVisible(true);
        medicationPlanDialog.pack();
    }
    
    /**
     * creates table for PDF for printing
     * @param newPatient
     */
    public void printTable(Patient newPatient){


        Desktop dt = Desktop.getDesktop();
       String filename = "patient_files/" + jFirstNameField.getText()+ "_" + jLastNameField.getText();
       
       Document document = new Document(PageSize.A4);
       try{
           PdfWriter.getInstance(document, new FileOutputStream(filename + ".pdf"));
           document.open();
           Paragraph header = new Paragraph();
           header.add(new Paragraph("MEDICATION PLAN\n", headerFont));
        header.add(new Paragraph(newPatient.firstName+ " " + newPatient.lastName + " \n\n\n", headerFont));
        header.setAlignment(Element.ALIGN_CENTER);
        Paragraph target = new Paragraph();
        target.add(new Chunk("Target Date: "));
        Chunk targetd = new Chunk(targetDateField.getText()+"\n\n");
        target.add(targetd);
        document.add(header);
        document.add(target);
        printpdfTable(newPatient, document);
        document.close();
           try{
               dt.open(new File (filename + ".pdf"));

           }catch(IOException ioe){
               System.out.println("FIle not found");
                        }
        //boolean success = new File(filename + ".pdf").delete();
       }catch(DocumentException de){
           System.err.println(de.getMessage());
       }catch(IOException ioe){
           System.err.println(ioe.getMessage());
       }

       
    }
    /**
     * creates table for PDF for printing
     * @param newPatient
     */
    public void printLongTable(Patient newPatient){
       Desktop dt = Desktop.getDesktop();
       String filename = "patient_files/" + jFirstNameField.getText()+ "_" + jLastNameField.getText();

       Document document = new Document(PageSize.A4);
       try{
           PdfWriter.getInstance(document, new FileOutputStream(filename + ".pdf"));
           document.open();
           Paragraph header = new Paragraph();
           header.add(new Paragraph("MEDICATION PLAN\n", headerFont));
        header.add(new Paragraph(newPatient.firstName+ " " + newPatient.lastName + " \n\n\n", headerFont));
        header.setAlignment(Element.ALIGN_CENTER);
        Paragraph target = new Paragraph();
        target.add(new Chunk("Target Date: "));
        Chunk targetd = new Chunk(longFillTargetDateField.getText()+"\n\n");
        target.add(targetd);
        document.add(header);
        document.add(target);
        printpdfTableBig(newPatient, document);
        document.close();
           try{
               dt.open(new File (filename + ".pdf"));
               //wait(4000);
               //boolean success = new File(filename + ".pdf").delete();
           }catch(IOException ioe){
               System.out.println("FIle not found");
           }/*catch(InterruptedException ie){
               ie.printStackTrace();
           }*/
        //boolean success = new File(filename + ".pdf").delete();
       }catch(DocumentException de){
           System.err.println(de.getMessage());
       }catch(IOException ioe){
           System.err.println(ioe.getMessage());
       }
    }
    /**
     * Creates table to add to pdf for printing
     * @param newPatient
     * @param document
     * @throws DocumentException
     */
    public static void printpdfTable(Patient newPatient, Document document)
                                    throws DocumentException{

       PdfPTable table = new PdfPTable(3);
       table.addCell("Medication Name");
       table.addCell("Next Refill Date");
       table.addCell("Number of Days to Fill");
       Medication current = newPatient.medList.firstMed;
       while(current!=null){
           table.addCell(current.medName);
           table.addCell(current.fillDate.toString());
           table.addCell(Integer.toString(current.planFillLength));
           current=current.nextMed;
       }

       document.add(table);
    }
/**
 * creates table for the PDF for a patient whose medication does not allow
 * long fills
 * @param newPatient
 * @param document
 * @throws DocumentException
 */
    public static void printpdfTableBig(Patient newPatient, Document document)
                                throws DocumentException{
        PdfPTable table = new PdfPTable(5);
        table.addCell("Medication Name");
        table.addCell("Next Refill Date");
        table.addCell("Short Fill (days)");
        table.addCell("Next Fill Date");
        table.addCell("Fill For (days)");
        Medication current = newPatient.medList.firstMed;
        while(current!=null){
            table.addCell(current.medName);
            table.addCell(current.fillDate.toString());
            table.addCell(Integer.toString(current.daysLeft));
            table.addCell(current.longFillDate.toString());
            table.addCell(Integer.toString(current.planFillLength));
            current=current.nextMed;
        }
        document.add(table);
    }

    /**
     * fillTableBig creates a table for a patient who's insurance does
     * not allow long fills.  It is used to display the medication plan
     * @param newPatient
     * @param target
     */
    public void fillTableBig(Patient newPatient, LocalDate target){
        int row = 0;
        Medication current = newPatient.medList.firstMed;
        while(current != null){
            longFillPlanTable.setValueAt(current.medName, row, 0);
            longFillPlanTable.setValueAt(current.fillDate.toString(),row,1);
            longFillPlanTable.setValueAt(current.daysLeft,row, 2);
            longFillPlanTable.setValueAt(current.longFillDate,row,3);
            longFillPlanTable.setValueAt(current.planFillLength,row,4);
            row++;
            current = current.nextMed;

        }
        longFillTargetDateField.setText(target.toString());
        longFillPlanDialog.setVisible(true);
        longFillPlanDialog.pack();
    }

    /**
     * saveData save the patient information so that it may be
     * used to create refill forms
     * @param newPatient
     */
    public void saveData(Patient newPatient){
        try{
            File file = new File("patient_files/"+ createFileName(newPatient.firstName,newPatient.lastName));

            Writer output = new BufferedWriter(new FileWriter(file));
            output.write(newPatient.firstName + " " + newPatient.lastName + "\n");
            output.write(newPatient.birthday.toString() + "\n");
            output.write(newPatient.streetAddress + " " + newPatient.cityAddress + " " + newPatient.stateAddress + "\n");
            output.write(newPatient.doctorName + "\n");
            output.write(newPatient.doctorFaxNum + "\n");

            Medication current = newPatient.medList.firstMed;
            while(current!=null){
             output.write(current.medName + "\n");
             output.write(current.sig + "\n");
             current = current.nextMed;
            }
            output.close();
        }catch(FileNotFoundException fjf){
            System.out.println("File NOt FOund");
        }catch(java.io.IOException ioe){
            System.out.println("IO Exception");
        }

    }
    /**
     * shows the files for patient refill forms
     */
    public void showPatientsForForms(){
        String uDir = System.getProperty("user.dir");
        System.out.println(uDir);
        File userDir = new File(uDir + "/patient_files");
        String filenames [] = userDir.list();
        Vector fileVector = new Vector();
        for(int i = 0; i < filenames.length; i ++){
            fileVector.add(filenames[i]);
        }
        jFileNamesList.setListData(fileVector);

    }

    /**
     * createFileName builds a filename with the current Patient's
     * first and last name.  It is called in the method saveData
     *
     * @param first
     * @param last
     * @return
     */
    public String createFileName(String first, String last){
        String fileName =  last + "-" + first;
        return fileName;

    }

 /**
  * adds header to refill form pdf
  * @param document
  * @param sInfo
  * @throws DocumentException
  */
    public static void addStoreHeader(Document document,storeInfo sInfo)
                            throws DocumentException{
        Paragraph header = new Paragraph();
        header.add(new Paragraph(sInfo.name, headerFont));
        header.add(new Paragraph("RxSync@", headerFont));
        header.add(new Paragraph(sInfo.address, headerFontSmall));
        header.add(new Paragraph("Phone: " + sInfo.phone + " Fax: " + sInfo.fax, headerFontSmall));
        header.add(new Paragraph(" "));
        header.add(new Paragraph("Prescription Order Form",headerFontSmall));
        header.add(new Paragraph(" "));
        header.setAlignment(Element.ALIGN_CENTER);
        document.add(header);

    }
/**
 * adds doctor information for refill form PDF
 * @param document
 * @param doc
 * @param fax
 * @throws DocumentException
 */
    public static void addDocInfo(Document document, String doc, String fax )
                            throws DocumentException{
        Paragraph docInfo = new Paragraph();

        Chunk docLabel = new Chunk ("Physician Name: ",headerFontSmall);
        Chunk docName  = new Chunk (doc, infoFont);
        docName.setUnderline(+1f,-2f);

        Chunk docFaxLabel = new Chunk ("  Fax: ",headerFontSmall);
        Chunk docFax = new Chunk(fax, infoFont);
        docFax.setUnderline(+1f,-2f);

        docInfo.add(docLabel);
        docInfo.add(docName);
        docInfo.add(docFaxLabel);
        docInfo.add(docFax);

        document.add(docInfo);
        document.add(new Paragraph(" "));
        document.add(new Paragraph(" "));
    }

    /**
     * adds Patient info for refill form PDF
     * @param document
     * @param name
     * @param dob
     * @param addressS
     * @throws DocumentException
     */
    public static void addPatientInfo(Document document, String name, String dob, String addressS)
                            throws DocumentException{
        Paragraph patientInfo = new Paragraph();
        Paragraph patientAddress = new Paragraph();

        Chunk patientLabel = new Chunk ("Patient Name: " , headerFontSmall);
        Chunk patientName = new Chunk (name,infoFont);
        patientName.setUnderline(+1f,-2f);

        //Paragraph dobPar = new Paragraph();
        //dobPar.setAlignment(Element.ALIGN_CENTER);
        Chunk patientDOBLabel = new Chunk("  DOB: ",headerFontSmall);
        Chunk patientDOB = new Chunk(dob, infoFont);
        patientDOB.setUnderline(+1f,-2f);
        //dobPar.add(patientDOBLabel);
        //dobPar.add(patientDOB);

        //datePar.setAlignment(Element.ALIGN_RIGHT);
        Chunk dateLabel = new Chunk(" Date: ", headerFontSmall );
        DateTime dt = new DateTime();
        int month = dt.getMonthOfYear();
        int day = dt.getDayOfMonth();
        int year = dt.getYear();
        String dateString = "" + year + "-" + month + "-"+ day;
        Chunk date = new Chunk(dateString,infoFont);
        date.setUnderline(+1f,-2f);
        //datePar.add(dateLabel);
        //datePar.add(date);

        Chunk addressLabel = new Chunk("Address: ", headerFontSmall);
        Chunk address = new Chunk(addressS, infoFont);
        address.setUnderline(+1f,-2f);

        patientInfo.add(patientLabel);
        patientInfo.add(patientName);
        patientInfo.add(patientDOBLabel);
        patientInfo.add(patientDOB);
        //patientInfo.add(dobPar);
        patientInfo.add(dateLabel);
        patientInfo.add(date);
        //patientInfo.add(datePar);
        patientInfo.setAlignment(Element.ALIGN_JUSTIFIED);

        patientAddress.add(addressLabel);
        patientAddress.add(address);

        document.add(patientInfo);
        document.add(patientAddress);

        document.add(new Paragraph("If the patient needs to come in for an apppointment, please let us know"
                + " and we will notify the patient.",smallFont));

        document.add(new Paragraph(" "));


    }

    /**
     * adds medication info for refill form pdf
     * @param document
     * @param refills
     * @param medSigMap
     * @throws DocumentException
     */
    public static void addMedications(Document document, MedicationList medlist)
                                throws DocumentException{

        Chunk medHeader = new Chunk("Medications:" , headerFontSmall);
        medHeader.setUnderline(+1f,-2f);

        Paragraph labels = new Paragraph();
        labels.add(medHeader);
        labels.add(new Paragraph("\nPlease Circle Number of Refills"));
        labels.add(new Paragraph(" "));
        document.add(labels);

        Medication current = medlist.firstMed;
        int i =0;
        while(current!=null){
            Paragraph medication = new Paragraph();
            Chunk medLabel = new Chunk(i+1 + ".  Name and Strength: ");
            Chunk medName = new Chunk(" " + current.medName + " ");
            medName.setUnderline(+1f,-2f);
            Chunk sigLabel = new Chunk("  Sig: ");
            Chunk sig = new Chunk(current.sig + "\n");
            sig.setUnderline(+1f,-2f);
            Paragraph circle = new Paragraph("                  Refills: 1 2 3 4 5 I-year");
            medication.add(medLabel);
            medication.add(medName);
            medication.add(sigLabel);
            medication.add(sig);
            medication.add(circle);
            medication.add(new Paragraph(" "));
            document.add(medication);

            current=current.nextMed;
            i++;
        }

    }

    /**
     * adds authorization fields for refill form PDF
     * @param document
     * @throws DocumentException
     */
    public static void addAuthorization(Document document) throws DocumentException{
        Chunk bigUnderline = new Chunk("                                                                        ");
        bigUnderline.setUnderline(TOP_ALIGNMENT,TOP_ALIGNMENT);
        Chunk smallUnderline = new Chunk("                                          ");
        //smallUnderline.setUnderline(+1f,-2f);
        smallUnderline.setUnderline(TOP_ALIGNMENT, TOP_ALIGNMENT);
        Chunk npiLabel = new Chunk("   NPI ");
        Paragraph first = new Paragraph();
        first.add(bigUnderline);
        first.add(npiLabel);
        first.add(smallUnderline);
        Chunk authsig = new Chunk("\nAuthorized Signature\n\n", smallFont);
        first.add(authsig);

        Paragraph second = new Paragraph();
        second.add(bigUnderline);
        Chunk dateLabel = new Chunk("   Date ");
        second.add(dateLabel);
        second.add(smallUnderline);
        Chunk sigsub = new Chunk("\nSignature for Substitution", smallFont);
        second.add(sigsub);
        
        document.add(first);
        document.add(second);
        document.add(new Paragraph(" "));
        document.add(new Paragraph(" "));


    }

    /**
     * adds footer for refill form PDF
     * @param document
     * @param fax
     * @throws DocumentException
     */
    public static void addFooter(Document document, String fax) throws DocumentException{
        Paragraph footer = new Paragraph();
        Chunk footerChunk = new Chunk("Please fax to: " + fax);
        footer.add(footerChunk);


        document.add(footer);

        //HeaderFooter footer = new HeaderFooter(new Phrase("Please fax to: " fax),true);
    }

    /**
     * clears <jAddMedicationDialog>
     */
    public void clearAddMedicationDialog(){
            jAddMedicationDialog.setVisible(false);
            jMedicationNameField.setText("");
            jFillDateMonthField.setText("");
            jCopayAmountField.setText("");
            jFillDateDayField.setText("");
           
    }


    /**
     * Makes all buttons respond to Enter when pressed
     */
    private static void setupEnterActionForAllButtons() {
        InputMap im = (InputMap) UIManager.getDefaults().get("Button.focusInputMap");
        Object pressedAction = im.get(KeyStroke.getKeyStroke("pressed SPACE"));
        Object releasedAction = im.get(KeyStroke.getKeyStroke("released SPACE"));

        im.put(KeyStroke.getKeyStroke("pressed ENTER"), pressedAction);
        im.put(KeyStroke.getKeyStroke("released ENTER"), releasedAction);
    }

    /**
     * clears all patient files
     */
    public static void clearPatientFiles(){
        File folder = new File("patient_files/");
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {
            listOfFiles[i].delete();
        }
    }

    public void fillbox(){
         String [] sig = new String[59];
    int i =0;
    try{
        Scanner patientIn = new Scanner(new FileReader("output.txt"));

        while(patientIn.hasNext()){
            sig[i] = patientIn.next();
            i++;
        }
        jSigComboBox.setModel(new javax.swing.DefaultComboBoxModel(sig));
    }catch(FileNotFoundException fnf){

    }
    }


    //read configuration file

   /* public static storeInfo readStoreInfo() throws IOException{
        
        return new storeInfo(name,address,city,state,zip,phone,fax,sync);
    }
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuildForm;
    private javax.swing.JButton BuildForm2;
    private javax.swing.JButton Test;
    private javax.swing.JButton buildFormButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton closePlan;
    private javax.swing.JTextField dobDayField;
    private javax.swing.JTextField dobMonthField;
    private javax.swing.JTextField dobYearField;
    private javax.swing.JButton jAddMedicationButton;
    private javax.swing.JDialog jAddMedicationDialog;
    private javax.swing.JCheckBox jAllowsLongCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jCancelAddMedicationButton;
    private javax.swing.JTextField jCityField;
    private javax.swing.JButton jClearButton;
    private javax.swing.JButton jConfirmAddMedicationButton;
    private javax.swing.JTextField jCopayAmountField;
    private javax.swing.JButton jDeleteMedicationButton;
    private javax.swing.JTextField jDocFaxNumField;
    private javax.swing.JTextField jDoctorFirstField;
    private javax.swing.JTextField jDoctorLastField;
    private javax.swing.JTextField jEmailAddressField;
    private javax.swing.JList jFileNamesList;
    private javax.swing.JTextField jFillDateDayField;
    private javax.swing.JTextField jFillDateMonthField;
    private javax.swing.JTextField jFillDateYearField;
    private javax.swing.JTextField jFirstNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jLastNameField;
    private javax.swing.JTextField jMedicationNameField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JDialog jSettingsDialog;
    private javax.swing.JComboBox jSigComboBox;
    private javax.swing.JTextField jStateField;
    private javax.swing.JTextField jStreetField;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField jZipField;
    private javax.swing.JDialog longFillPlanDialog;
    private javax.swing.JTable longFillPlanTable;
    private javax.swing.JTextField longFillTargetDateField;
    private javax.swing.JList medicationListBox;
    private javax.swing.JDialog medicationPlanDialog;
    private javax.swing.JTable medicationPlanTable;
    private javax.swing.JButton printLongTable;
    private javax.swing.JButton printPlan;
    private javax.swing.JList refillList;
    private javax.swing.JButton settingsButton;
    private javax.swing.JTextField storeCityTextField;
    private javax.swing.JTextField storeFaxTextField;
    private javax.swing.JTextField storeNameTextField;
    private javax.swing.JTextField storePhoneTextField;
    private javax.swing.JTextField storeStateTextField;
    private javax.swing.JTextField storeStreetTextField;
    private javax.swing.JTextField storeZipTextField;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton syncButton;
    private javax.swing.JRadioButton syncToCopay;
    private javax.swing.JRadioButton syncToRefill;
    private javax.swing.JTextField targetDateField;
    private javax.swing.JCheckBox useEmailCheckBox;
    private javax.swing.JCheckBox useFaxCheckBox;
    // End of variables declaration//GEN-END:variables

}
